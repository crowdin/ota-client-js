"use strict";(self.webpackChunk_crowdin_ota_client_js_website=self.webpackChunk_crowdin_ota_client_js_website||[]).push([[110],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>d});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=c(n),f=o,d=g["".concat(s,".").concat(f)]||g[f]||p[f]||i;return n?r.createElement(d,a(a({ref:t},u),{},{components:n})):r.createElement(d,a({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8732:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(8168),o=(n(6540),n(5680));const i={},a="Quick Start",l={unversionedId:"quick-start",id:"quick-start",title:"Quick Start",description:"Creating a distribution",source:"@site/docs/quick-start.mdx",sourceDirName:".",slug:"/quick-start",permalink:"/ota-client-js/quick-start",draft:!1,editUrl:"https://github.com/crowdin/ota-client-js/tree/main/website/docs/quick-start.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/ota-client-js/installation"},next:{title:"Configuration",permalink:"/ota-client-js/configuration"}},s={},c=[{value:"Creating a distribution",id:"creating-a-distribution",level:2},{value:"Usage",id:"usage",level:2},{value:"JSON Content",id:"json-content",level:3},{value:"Other examples",id:"other-examples",level:3},{value:"Further reading",id:"further-reading",level:2}],u={toc:c},g="wrapper";function p(e){let{components:t,...n}=e;return(0,o.yg)(g,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"quick-start"},"Quick Start"),(0,o.yg)("h2",{id:"creating-a-distribution"},"Creating a distribution"),(0,o.yg)("p",null,"Distribution is a CDN vault that mirrors the translated content of your project. Thanks to the CDN (Content Delivery Network), the translated content will become available to users much faster."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://support.crowdin.com/content-delivery/"},"Creating a distribution in crowdin.com")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://support.crowdin.com/enterprise/content-delivery/"},"Creating a distribution in Crowdin Enterprise"))),(0,o.yg)("h2",{id:"usage"},"Usage"),(0,o.yg)("h3",{id:"json-content"},"JSON Content"),(0,o.yg)("p",null,"Example of loading strings from JSON files:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"import otaClient from '@crowdin/ota-client';\n\nconst hash = '{distribution_hash}';\n\nconst client = new otaClient(hash);\n\n// will return all translation strings for all languages from all json files\nclient.getStrings()\n  .then(res => {\n    // get needed translation by language + key\n    console.log(res.uk.application.title);\n  })\n  .catch(error => console.error(error));\n\n// or get exact translation by key\nclient.getStringByKey(['application', 'title'], 'uk')\n  .then(title => console.log(title))\n  .catch(error => console.error(error));\n\n// or define a global language and not pass it everywhere\nclient.setCurrentLocale('uk');\nclient.getStringByKey(['application', 'title'])\n  .then(title => console.log(title))\n  .catch(error => console.error(error));\n")),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"https://runkit.com/andrii-bodnar/crowdin-ota-js-client-live-demo"},(0,o.yg)("strong",{parentName:"a"},"Live Demo")),"."),(0,o.yg)("h3",{id:"other-examples"},"Other examples"),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Typescript"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"import otaClient from '@crowdin/ota-client';\n\n// distribution hash\nconst hash = '{distribution_hash}';\n\n// initialization of crowdin ota client\nconst client = new otaClient(hash);\n\n// get content info in distribution\nclient.getContent()\n  .then(content => console.log(content))\n  .catch(error => console.error(error));\n\n// one of files for fr language from client.getContent\nconst file = '/content/fr/file.json';\n// get file translations\nclient.getFileTranslations(file)\n  .then(translations => console.log(translations))\n  .catch(error => console.error(error));\n"))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Javascript ES6 modules"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},"import otaClient from '@crowdin/ota-client';\n// or const otaClient = require('./out/index.js').default;\n\n// distribution hash\nconst hash = '{distribution_hash}';\n\n// initialization of crowdin ota client\nconst client = new otaClient(hash);\n\n// get content info in distribution\nclient.getContent()\n  .then(content => console.log(content))\n  .catch(error => console.error(error));\n\n// one of files for fr language from client.getContent\nconst file = '/content/fr/file.json';\n// get file translations\nclient.getFileTranslations(file)\n  .then(translations => console.log(translations))\n  .catch(error => console.error(error));\n"))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Javascript CommonJS"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},"const otaClient = require('@crowdin/ota-client').default;\n\n// distribution hash\nconst hash = '{distribution_hash}';\n\n// initialization of crowdin ota client\nconst client = new otaClient(hash);\n\n// get content info in distribution\nclient.getContent()\n  .then(content => console.log(content))\n  .catch(error => console.error(error));\n\n// one of files for fr language from client.getContent\nconst file = '/content/fr/file.json';\n// get file translations\nclient.getFileTranslations(file)\n  .then(translations => console.log(translations))\n  .catch(error => console.error(error));\n"))),(0,o.yg)("h2",{id:"further-reading"},"Further reading"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/configuration"},"Configuration")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/api/classes/OtaClient"},"API"))))}p.isMDXComponent=!0}}]);