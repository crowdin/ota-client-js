"use strict";(self.webpackChunk_crowdin_ota_client_js_website=self.webpackChunk_crowdin_ota_client_js_website||[]).push([[699],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>g});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=r.createContext({}),c=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},u=function(t){var e=c(t.components);return r.createElement(s.Provider,{value:e},t.children)},p="mdxType",f={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,s=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),p=c(n),d=o,g=p["".concat(s,".").concat(d)]||p[d]||f[d]||i;return n?r.createElement(g,a(a({ref:e},u),{},{components:n})):r.createElement(g,a({ref:e},u))}));function g(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l[p]="string"==typeof t?t:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9478:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={},a="Quick Start",l={unversionedId:"quick-start",id:"quick-start",title:"Quick Start",description:"Creating a distribution",source:"@site/docs/quick-start.mdx",sourceDirName:".",slug:"/quick-start",permalink:"/ota-client-js/quick-start",draft:!1,editUrl:"https://github.com/crowdin/ota-client-js/tree/main/docs/quick-start.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/ota-client-js/installation"},next:{title:"Configuration",permalink:"/ota-client-js/configuration"}},s={},c=[{value:"Creating a distribution",id:"creating-a-distribution",level:2},{value:"Usage",id:"usage",level:2},{value:"JSON Content",id:"json-content",level:3},{value:"Other examples",id:"other-examples",level:3},{value:"Further reading",id:"further-reading",level:2}],u={toc:c},p="wrapper";function f(t){let{components:e,...n}=t;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quick-start"},"Quick Start"),(0,o.kt)("h2",{id:"creating-a-distribution"},"Creating a distribution"),(0,o.kt)("p",null,"Distribution is a CDN vault that mirrors the translated content of your project. Thanks to the CDN (Content Delivery Network), the translated content will become available to users much faster."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://support.crowdin.com/content-delivery/"},"Creating a distribution in crowdin.com")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://support.crowdin.com/enterprise/content-delivery/"},"Creating a distribution in Crowdin Enterprise"))),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("h3",{id:"json-content"},"JSON Content"),(0,o.kt)("p",null,"Example of loading strings from JSON files:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import otaClient from '@crowdin/ota-client';\n\nconst hash = '{distribution_hash}';\n\nconst client = new otaClient(hash);\n\n// will return all translation strings for all languages from all json files\nclient.getStrings()\n  .then(res => {\n    // get needed translation by language + key\n    console.log(res.uk.application.title);\n  })\n  .catch(error => console.error(error));\n\n// or get exact translation by key\nclient.getStringByKey(['application', 'title'], 'uk')\n  .then(title => console.log(title))\n  .catch(error => console.error(error));\n\n// or define a global language and not pass it everywhere\nclient.setCurrentLocale('uk');\nclient.getStringByKey(['application', 'title'])\n  .then(title => console.log(title))\n  .catch(error => console.error(error));\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://runkit.com/andrii-bodnar/crowdin-ota-js-client-live-demo"},(0,o.kt)("strong",{parentName:"a"},"Live Demo")),"."),(0,o.kt)("h3",{id:"other-examples"},"Other examples"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Typescript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import otaClient from '@crowdin/ota-client';\n\n// distribution hash\nconst hash = '{distribution_hash}';\n\n// initialization of crowdin ota client\nconst client = new otaClient(hash);\n\n// get content info in distribution\nclient.getContent()\n  .then(content => console.log(content))\n  .catch(error => console.error(error));\n\n// one of files for fr language from client.getContent\nconst file = '/content/fr/file.json';\n// get file translations\nclient.getFileTranslations(file)\n  .then(translations => console.log(translations))\n  .catch(error => console.error(error));\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Javascript ES6 modules"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import otaClient from '@crowdin/ota-client';\n// or const otaClient = require('./out/index.js').default;\n\n// distribution hash\nconst hash = '{distribution_hash}';\n\n// initialization of crowdin ota client\nconst client = new otaClient(hash);\n\n// get content info in distribution\nclient.getContent()\n  .then(content => console.log(content))\n  .catch(error => console.error(error));\n\n// one of files for fr language from client.getContent\nconst file = '/content/fr/file.json';\n// get file translations\nclient.getFileTranslations(file)\n  .then(translations => console.log(translations))\n  .catch(error => console.error(error));\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Javascript CommonJS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const otaClient = require('@crowdin/ota-client').default;\n\n// distribution hash\nconst hash = '{distribution_hash}';\n\n// initialization of crowdin ota client\nconst client = new otaClient(hash);\n\n// get content info in distribution\nclient.getContent()\n  .then(content => console.log(content))\n  .catch(error => console.error(error));\n\n// one of files for fr language from client.getContent\nconst file = '/content/fr/file.json';\n// get file translations\nclient.getFileTranslations(file)\n  .then(translations => console.log(translations))\n  .catch(error => console.error(error));\n"))),(0,o.kt)("h2",{id:"further-reading"},"Further reading"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"configuration"},"Configuration")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"api/classes/OtaClient"},"API"))))}f.isMDXComponent=!0}}]);